{
  "name": "plotter",
  "version": "0.4.3",
  "description": "Turns an array of data into a graph in a pdf document.",
  "main": "plotter.js",
  "author": {
    "name": "Richard Eoin",
    "email": "richardeoin@gmail.com"
  },
  "dependencies": {
    "underscore": "1.4.x"
  },
  "keywords": [
    "plotting",
    "graph",
    "pdf",
    "gnuplot"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/richardeoin/nodejs-plotter.git"
  },
  "license": "MIT",
  "engine": "node >= 0.8.14",
  "readme": "**nodejs-plotter** is a [node.js](http://nodejs.org/) module that turns an array of data into a graph. Uses [gnuplot](http://www.gnuplot.info/) and [ps2pdf](http://pages.cs.wisc.edu/~ghost/doc/AFPL/6.50/Ps2pdf.htm).\n\n## Installation ##\n\nPrerequisites:\n\n```\nsudo apt-get install gnuplot ghostscript\n```\n\nIf you have [npm](https://npmjs.org/) installed, just run:\n\n```\nnpm install plotter\n```\n\n## Usage ##\n\n```javascript\nvar plot = require('plotter').plot;\n\nplot({\n\tdata:\t\t[ 3, 1, 2, 3, 4 ],\n\tfilename:\t'output.pdf'\n});\n```\n\nPlotting is achieved by calling the plot function with an object containing various properties. Both `'data'` and `'filename'` are essential, all other properties are optional.\n\n### Output format ###\n\nThis defaults to `.pdf` but specifing `format: svg` changes the output to [.svg](http://www.w3.org/Graphics/SVG/).\n\n```javascript\nvar plot = require('plotter').plot;\n\nplot({\n\tdata:\t\t[ 3, 1, 2, 3, 4 ],\n\tfilename:\t'output.svg',\n\tformat:\t\t'svg'\n});\n```\n\n### Formatting ###\n\nThe following properties can be used:\n- `title` : _Sets the title of the graph_\n- `xlabel` : _Sets the label on the x axis of the graph_\n- `ylabel` : _Sets the label on the y axis of the graph_\n- `logscale` : _Makes the y axis of the graph appear in a log scale_\n- `style` : _The style of the lines on the graph. Possibilites include `lines` (default), `points` and `linespoints`_\n- `nokey` : _Disables the graph key_\n\nThe following example shows these in use:\n\n```javascript\nplot({\n\tdata:\t\t[ 3, 1, 2, 3, 4 ],\n\tfilename:\t'output.pdf',\n\tstyle:\t\t'linespoints',\n\ttitle:\t\t'Example \\'Title\\', \\\\n runs onto multiple lines',\n\tlogscale:\ttrue,\n\txlabel:\t\t'time',\n\tylabel:\t\t'length of string'\n});\n```\n\n### Specifing X and Y values ###\n\n```javascript\nplot({\n\tdata:\t\t{ 'line' : { 1: 5, 5: 6 } },\n\tfilename:\t'output.pdf'\n});\n```\n\nInstead of specifing an array for `data`, you can specify an object with a named series inside.\n\n### Multiple Series ###\n\n```javascript\nplot({\n\tdata:\t\t{ 'tick' : [ 3, 1, 2, 3, 4 ], 'line' : { 1: 5, 5: 6 } },\n\tfilename:\t'output.pdf'\n});\n```\n\nYou can specify multiple series inside an object.\n\n### Moving Averages and Maximums ###\n\n```javascript\nplot({\n\tdata:\t\t{ 'tick' : [ 3, 1, 2, 3, 4, 15, 3, 2, 4, 11 ], 'tick2' : [ 3, 10, 2, 30, 4, 15, 3, 20, 4, 11 ] },\n\tfilename:\t'output.pdf',\n\tmoving_avg:\t4\n});\n```\n\nThis will plot the points with a 4-point moving average. A `moving_max` can also be specified, which if applied alongside a `moving_avg` will be calculated after the moving average.\n\n### Time Formatting ###\n\n```javascript\nplot({\n\tdata:\t\t{ 'temperature' : { 1357162672: 22, 1357162782: 23, 1357162892: 24 } },\n\ttime:\t\t'hours',\n\tfilename:\t'output.pdf'\n});\n```\n\nThe x axis can be formatted as a time series if the x values are given as a [unix time](http://en.wikipedia.org/wiki/Unix_time). The `time` property can be specified as either `'hours'` (the default), `'days'` or with a [gnuplot time format](http://gnuplot.sourceforge.net/docs_4.2/node274.html) like `'%H:%M'`.\n\n## LICENSE ###\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/richardeoin/nodejs-plotter/issues"
  },
  "homepage": "https://github.com/richardeoin/nodejs-plotter",
  "_id": "plotter@0.4.3",
  "dist": {
    "shasum": "c00c4e5ab6b1a159242cabe4fa611f35264f0d98"
  },
  "_from": "plotter@",
  "_resolved": "https://registry.npmjs.org/plotter/-/plotter-0.4.3.tgz"
}
